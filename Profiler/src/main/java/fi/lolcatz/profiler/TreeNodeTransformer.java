package fi.lolcatz.profiler;

import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.tree.*;

import java.lang.instrument.ClassFileTransformer;
import java.lang.instrument.IllegalClassFormatException;
import java.security.ProtectionDomain;
import java.util.Iterator;
import java.util.List;

import static org.objectweb.asm.Opcodes.*;

/**
 * Test transformation using ASMs Tree API.
 * {@inheritDoc}
 */
public class TreeNodeTransformer implements ClassFileTransformer {

    /**
     * Transform class using tree API. asm4-guide.pdf pg. 96
     * {@inheritDoc}
     */
    @Override
    public byte[] transform(
            ClassLoader loader,
            String className,
            Class<?> classBeingRedefined,
            ProtectionDomain protectionDomain,
            byte[] classfileBuffer) throws IllegalClassFormatException {
        // Don't touch internal classes for now.
        if (className.startsWith("java/") || className.startsWith("sun/")) {
            return null;
        }

        ClassNode classNode = initClassNode(classfileBuffer);

        for (MethodNode methodNode : (List<MethodNode>) classNode.methods) {
            // Skip constructors
            if ("<init>".equals(methodNode.name) || "<clinit>".equals(methodNode.name)) {
                continue;
            }

            System.out.println(className + "." + methodNode.name);

            InsnList insns = methodNode.instructions;
            InsnList printInsn = getPrintInsn("Method: " + methodNode.name);
            insns.insert(printInsn);
        }

        return generateBytecode(classNode);
    }

    /**
     * Creates a list of instructions that print the given message.
     * @param message Message to print.
     * @return InsnList with proper instructions.
     */
    private InsnList getPrintInsn(String message) {
        InsnList printInsn = new InsnList();
        printInsn.add(new FieldInsnNode(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;"));
        printInsn.add(new LdcInsnNode("RUNTIME: " + message));
        printInsn.add(new MethodInsnNode(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V"));
        return printInsn;
    }

    /**
     * Init a ClassNode object using events generated by ClassReader from <code>classFileBuffer</code>.
     *
     * @param classfileBuffer Class as byte[] to generate ClassNode from.
     * @return Initialized ClassNode object.
     */
    private ClassNode initClassNode(byte[] classfileBuffer) {
        ClassNode cn = new ClassNode();
        ClassReader cr = new ClassReader(classfileBuffer);
        cr.accept(cn, 0);
        return cn;
    }

    /**
     * Create bytecode from ClassNode object.
     *
     * @param cn ClassNode to generate bytecode from.
     * @return Bytecode.
     */
    private byte[] generateBytecode(ClassNode cn) {
        ClassWriter cw = new ClassWriter(0);
        cn.accept(cw);
        return cw.toByteArray();
    }
}
